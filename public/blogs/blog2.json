{
    "id":"2",
    "titel": "How to Animate a rotating 3D Cube",
    "titelextend":"Using JavaScript and a HTML canvas element",
    "date": "5.11.2023",
    "content":"<h1>Intro</h1> To prepare for my practical phase, I set out to look for an interesting project. I wanted to use JavaScript because I needed to learn it. Eventually, I remembered a funny <a href='https://www.youtube.com/watch?v=sW9npZVpiMI'>video</a> from Joma Tech, a comedian on Youtube. In the sketch he was explaining why you need math for programming, he would program an in the terminal animated donut. Really liked the idea of animating something, I thought why not animate something myself eventually I thought of a cube because it seemed a little easier for the start.</p> My first try was also in the terminal and I was able to display the eight corners of the cube. I was not really satisfied with how it turned out, but my practical phase was starting right at that time so I was not really having that much time anymore. During the end of my practical phase I was starting to code this website my own blog. First, I wasn't really sure what to put on the landing page and a pic of me seemed kinda cringe... but then I remembered my previous project the animated cube. Here comes a brief Overview on how to animate a rotating cube like the one on my landing page:</br></br><h1>Explanation</h1> To animate a rotating 3D cube you need 3 essential things: first a cube consisting of eight 3D Points, rotation matrices and a display like the terminal or a canvas to show your animation.</p><h1>Cube</h1> To make the cube I made an object that holds the eight corner points(vertices) of the cube. Firstly I define 3DPoint constructor which creates simple object that just hold the X-value, Y-value and Z-value. I create the cube with only a midpoint and a size, I use this two parameters to calculate each vertex of the cube. (It is the easiest if the center of the Cube is in the coordinate origin, or else your need to be careful when using the standard rotation matrices.) If you want to connect the corners of your cube, define an Array that holds all of the different Edges of your Cube. An edge should hold 2 different points which need to be connected to form the cube's outline. In case you want to fill the side-squares of the cube you can do the same thing with all of the sides. I personally added 3 rotation methods to multiply the cube's vertices with the rotation matrices<h1>The Animation Loop</h1> The basic elements of the animation loop are the cube, a rotation angle and some method to display the points/lines.</br> Each iteration of the loop will represent a single frame. For each frame it is necessary to calculate the new positions of the vertices(corners) and to then display the refreshed positions. By changing the angle value of the different rotation matrices(there is one for every dimension) the rotation speed and direction can be influenced. The angle parameter should be increased for every single frame to continuously rotate the cube. Keep in mind that the parameter should have bounds so it doesn't get too long.<h1>My Example</h1> I implemented a rotating cube as a react component utilizing the html canvas and JavaScript. The well commented source Code is in my <a href='https://github.com/Yonekin/Cube_React/tree/main'>Git</a> repository. Feel free to contact my e-mail if you run into any issues and I will try my best to help.<Landingimg></Landingimg>"
}